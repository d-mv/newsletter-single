{"version":3,"sources":["components/Loading.tsx","store/post/types.tsx","store/user/actions.tsx","store/source/types.tsx","styles/Loading.module.scss","containers/App/App.tsx","store/post/reducers.tsx","store/source/reducers.tsx","store/user/reducers.tsx","store/index.tsx","serviceWorker.ts","index.tsx","store/user/types.tsx"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_styles_Loading_module_scss__WEBPACK_IMPORTED_MODULE_1__","_styles_Loading_module_scss__WEBPACK_IMPORTED_MODULE_1___default","Loading","a","createElement","className","style","loading","d","__webpack_exports__","SET_POSTS","UPDATE_POST","SELECT_POST","checkUser","apiRequest","_types__WEBPACK_IMPORTED_MODULE_0__","axios__WEBPACK_IMPORTED_MODULE_1__","axios__WEBPACK_IMPORTED_MODULE_1___default","query","promise","axios","post","then","response","catch","error","type","CHECK_USER","payload","SET_SOURCES","module","exports","Home","React","lazy","e","bind","Content","Promise","all","connect","state","user","withCookies","props","_React$useState","useState","_React$useState2","Object","slicedToArray","userEmail","setUserEmail","_React$useState3","_React$useState4","userToken","setUserToken","_React$useState5","_React$useState6","authStatus","setAuthStatus","_React$useState7","_React$useState8","counter","setCounter","_React$useState9","_React$useState10","setLoading","cookies","toggleAuth","existingCookies","email","get","token","cProps","action","fields","res","data","authed","verifyCookies","react_default","react","fallback","currentUser","signOff","set","path","emptyQuery","initialState","name","password","defaults","baseURL","concat","process","headers","common","rootReducer","combineReducers","posts","arguments","length","undefined","objectSpread","sources","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","WebFont","load","google","families","store","middlewares","reduxPromise","logger","middleWareEnhancer","applyMiddleware","apply","createStore","composeWithDevTools","configureStore","ReactDOM","render","es6","es","containers_App_App","document","getElementById","URL","href","origin","addEventListener","fetch","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","API_REQUEST"],"mappings":"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","file":"static/js/main.b683ece8.chunk.js","sourcesContent":["import React from \"react\";\n\nimport style from \"../styles/Loading.module.scss\";\n\nconst Loading = () => {\n  return <div className={style.loading}>Loading...</div>;\n};\n\nexport default Loading;\n","// Describing the shape of the system's slice of state\nexport interface Post {\n  _id: string;\n  source: string;\n  sourceId: string;\n  title: string;\n  url: string;\n  author: string;\n  published: Date;\n  parsed: Date;\n  text: string;\n  readTime: number;\n  pages: number;\n  read: boolean;\n  star: boolean;\n}\n\nexport interface SystemState {\n  posts: Post[];\n  token: \"\";\n  action: [];\n}\n\nexport interface Query {\n  action: [string, string];\n  id: string;\n  fields?: { [index: string]: string };\n}\nexport interface NewQuery {\n  token: string;\n  action: [string, string];\n  id?: string;\n  fields?: { [index: string]: string };\n}\n\nexport interface PostId {\n  id: string;\n}\n// Describing the different ACTION NAMES available\nexport const SET_POSTS = \"SET_POSTS\";\nexport const UPDATE_POST = \"UPDATE_POST\";\nexport const SELECT_POST = \"SELECT_POST\";\n\ninterface SetPostsAction {\n  type: typeof SET_POSTS;\n  payload: NewQuery;\n}\ninterface UpdatePostAction {\n  type: typeof UPDATE_POST;\n  payload: Query;\n}\n\ninterface SelectPostAction {\n  type: typeof SELECT_POST;\n  payload: PostId;\n}\n\nexport type SystemActionTypes =\n  | SetPostsAction\n  | UpdatePostAction\n  | SelectPostAction;\n","import { CHECK_USER, UserQuery } from \"./types\";\nimport axios from \"axios\";\n\nexport function checkUser(query: UserQuery) {\n  const promise = axios\n    .post(\"/\", {\n      query\n    })\n    .then(response => response)\n    .catch(error => error);\n\n  return {\n    type: CHECK_USER,\n    payload: promise\n  };\n}\nexport function apiRequest(query: UserQuery) {\n  const promise = axios\n    .post(\"/\", {\n      query\n    })\n    .then(response => response)\n    .catch(error => error);\n\n  return {\n    type: CHECK_USER,\n    payload: promise\n  };\n}\n","// Describing the shape of the system's slice of state\nimport { NewQuery } from \"../../types\";\n\nexport interface Source {\n  _id: string;\n  name: string;\n  url: string;\n  home: string;\n}\n\nexport interface SystemStateSource {\n  sources: Source[];\n}\n\n// export interface Query {\n//   action: [string, string];\n//   id: string;\n//   fields?: { [index: string]: string };\n// }\n\n// export interface PostId {\n//   id: string;\n// }\n// Describing the different ACTION NAMES available\nexport const SET_SOURCES = \"SET_SOURCES\";\n// export const UPDATE_POST = \"UPDATE_POST\";\n// export const SELECT_POST = \"SELECT_POST\";\n\ninterface SetSourcesAction {\n  type: typeof SET_SOURCES;\n  payload: NewQuery;\n}\n\n// interface UpdatePostAction {\n//   type: typeof UPDATE_POST;\n//   payload: Query;\n// }\n\n// interface SelectPostAction {\n//   type: typeof SELECT_POST;\n//   payload: PostId;\n// }\n\nexport type SystemActionTypes = SetSourcesAction;\n// | UpdatePostAction\n// | SelectPostAction;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loading\":\"Loading_loading__2MQcX\"};","import React, { Suspense } from \"react\";\n\nimport { withCookies } from \"react-cookie\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../../store\";\n\nimport { checkUser } from \"../../store/user/actions\";\n// import '../../styles/_definitions.scss'\nimport \"../../styles/_ui.scss\";\n\n// import ContentS from \"../../styles/Content\";\nimport Loading from \"../../components/Loading\";\n// import Content from \"../Content/Content\";\n\n// lazy loading\nconst Home = React.lazy(() => import(\"../Home/Home\"));\nconst Content = React.lazy(() => import(\"../Content/Content\"));\n\nconst App = (props?: any) => {\n  const [userEmail, setUserEmail] = React.useState(\"\");\n  const [userToken, setUserToken] = React.useState(\"\");\n  const [authStatus, setAuthStatus] = React.useState(false);\n  const [counter, setCounter] = React.useState(0);\n  const [loading, setLoading] = React.useState(true);\n  const { cookies } = props;\n  /**\n   * Function to toggle authentication status\n   * @function toggleAuth\n   * @returns {void}\n   */\n  const toggleAuth = () => {\n    setAuthStatus(!authStatus);\n  };\n\n  /**\n   * Function to verify cookies\n   * @function verifyCookies\n   * @param {object} cProps - Email/token pair\n   * @returns {void}\n   */\n  const verifyCookies = (cProps: { email: string; token: string }) => {\n    // set query object\n    const query = {\n      token: cProps.token,\n      action: [\"user\", \"verifyCookies\"],\n      fields: { email: cProps.email }\n    };\n    // request redux action to query API\n    props.checkUser(query).then((res: any) => {\n      const response = res.payload.data;\n      if (response.authed) {\n        setUserEmail(cProps.email);\n        setUserToken(cProps.token);\n        toggleAuth();\n      }\n      setLoading(false);\n    });\n  };\n  // get local cookies\n  const existingCookies = {\n    email: cookies.get(\"email\"),\n    token: cookies.get(\"token\")\n  };\n  // if cookies exist > verify or show Home\n  if (cookies.get(\"email\") && cookies.get(\"token\") && counter === 0) {\n    verifyCookies(existingCookies);\n    setCounter(1);\n  } else if (counter === 0) {\n    setLoading(false);\n    setCounter(1);\n  }\n\n  /**\n   * Function to log off\n   * @function logOff\n   * @returns {void}\n   */\n  const logOff = () => {\n    cookies.set(\"email\", \"\", {\n      path: \"/\"\n    });\n    cookies.set(\"token\", \"\", {\n      path: \"/\"\n    });\n    setUserEmail(\"\");\n    setUserToken(\"\");\n    setAuthStatus(false);\n  };\n\n  if (loading) {\n    // on load\n    return <Loading />;\n  } else if (authStatus) {\n    // if authenticated\n    return (\n      <Suspense fallback={<Loading />}>\n        <Content\n          currentUser={{\n            email: userEmail,\n            token: userToken\n          }}\n          signOff={logOff}\n        />\n      </Suspense>\n    );\n  } else {\n    // if not authenticated\n    return (\n      <Suspense fallback={<Loading />}>\n        <Home\n          cookies={props.cookies}\n          toggleAuth={toggleAuth}\n          setUserEmail={setUserEmail}\n          setUserToken={setUserToken}\n        />\n      </Suspense>\n    );\n  }\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  user: state.user\n});\n\nexport default connect(\n  mapStateToProps,\n  { checkUser }\n)(withCookies(App));\n","import {\n  SET_POSTS,\n  UPDATE_POST,\n  SELECT_POST,\n  // SystemState,\n  Query,\n  NewQuery,\n  PostId,\n  SystemActionTypes\n} from \"./types\";\n\nconst emptyQuery: NewQuery = {\n  token: \"\",\n  action: [\"\", \"\"]\n};\n\nexport function loadPosts(\n  state = emptyQuery,\n  action: SystemActionTypes\n): NewQuery {\n  switch (action.type) {\n    case SET_POSTS: {\n      return {\n        ...action.payload\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nconst emptyState: Query = {\n  action: [\"\", \"\"],\n  id: \"\",\n  fields: { \"\": \"\" }\n};\n\nexport function updatePost(\n  state = emptyState,\n  action: SystemActionTypes\n): Query {\n  switch (action.type) {\n    case UPDATE_POST: {\n      return {\n        ...action.payload\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nconst emptyPost: PostId = {\n  id: \"\"\n};\n\nexport function selectPost(\n  state = emptyPost,\n  action: SystemActionTypes\n): PostId {\n  switch (action.type) {\n    case SELECT_POST: {\n      return {\n        ...action.payload\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import { SET_SOURCES, SystemActionTypes } from \"./types\";\nimport { NewQuery } from \"../../types\";\n\nconst emptyQuery: NewQuery = {\n  token: \"\",\n  action: [\"\", \"\"]\n};\nexport function loadSources(\n  state = emptyQuery,\n  action: SystemActionTypes\n): NewQuery {\n  switch (action.type) {\n    case SET_SOURCES: {\n      return {\n        ...action.payload\n      };\n    }\n    default:\n      return state;\n  }\n}\n\n// export function loadPosts(\n//   state = emptyQuery,\n//   action: SystemActionTypes\n// ): NewQuery {\n//   switch (action.type) {\n//     case SET_POSTS: {\n//       return {\n//         ...action.payload\n//       };\n//     }\n//     default:\n//       return state;\n//   }\n// }\n\n// const emptyState: Query = {\n//   action: [\"\", \"\"],\n//   id: \"\",\n//   fields: { \"\": \"\" }\n// };\n\n// export function updatePost(\n//   state = emptyState,\n//   action: SystemActionTypes\n// ): Query {\n//   switch (action.type) {\n//     case UPDATE_POST: {\n//       return {\n//         ...action.payload\n//       };\n//     }\n//     default:\n//       return state;\n//   }\n// }\n\n// const emptyPost: PostId = {\n//   id: \"\"\n// };\n\n// export function selectPost(\n//   state = emptyPost,\n//   action: SystemActionTypes\n// ): PostId {\n//   switch (action.type) {\n//     case SELECT_POST: {\n//       return {\n//         ...action.payload\n//       };\n//     }\n//     default:\n//       return state;\n//   }\n// }\n","import {\n  CHECK_USER,\n  API_REQUEST,\n  UserSystemState,\n  // UserQuery,\n  SystemActionTypes\n} from \"./types\";\n\nconst initialState: UserSystemState = {\n  user: { name: \"\", password: \"\", email: \"\" },\n  currentUser: { email: \"\", token: \"\" }\n};\n\nexport function checkUser(\n  state = initialState,\n  action: SystemActionTypes\n): UserSystemState {\n  switch (action.type) {\n    case CHECK_USER: {\n      return {\n        // ...state,\n        ...action.payload\n      };\n    }\n    default:\n      return state;\n  }\n}\nexport function apiRequest(\n  state = initialState,\n  action: SystemActionTypes\n): UserSystemState {\n  switch (action.type) {\n    case API_REQUEST: {\n      return {\n        // ...state,\n        ...action.payload\n      };\n    }\n    default:\n      return state;\n  }\n}\n\n// const emptyState: Query = {\n//   action: [\"\", \"\"],\n//   id: \"\",\n//   fields: { \"\": \"\" }\n// };\n\n// export function updatePost(\n//   state = emptyState,\n//   action: SystemActionTypes\n// ): Query {\n//   switch (action.type) {\n//     case UPDATE_POST: {\n//       return {\n//         ...action.payload\n//       };\n//     }\n//     default:\n//       return state;\n//   }\n// }\n\n// const emptyPost: PostId = {\n//   id: \"\"\n// };\n\n// export function selectPost(\n//   state = emptyPost,\n//   action: SystemActionTypes\n// ): PostId {\n//   switch (action.type) {\n//     case SELECT_POST: {\n//       return {\n//         ...action.payload\n//       };\n//     }\n//     default:\n//       return state;\n//   }\n// }\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\n// import thunkMiddleware from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport axios from \"axios\";\n\n// import { Provider } from \"react-redux\";\n// import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport { logger } from \"redux-logger\";\nimport reduxPromise from \"redux-promise\";\n\n// reducers\nimport { loadPosts } from \"./post/reducers\";\nimport { loadSources } from \"./source/reducers\";\nimport { checkUser } from \"./user/reducers\";\n// import sourcesReducer from \"./reducers/sources_reducer\";\n// import addSourceReducer from \"./reducers/add_source_reducer\";\n// import updatePostReducer from \"./reducers/update_post_reducer\";\n// import updateSourceReducer from \"./reducers/update_source_reducer\";\n// import refreshPostsReducer from \"./reducers/refresh_posts_reducer\";\n// import selectPostReducer from \"./reducers/select_post_reducer\";\n// import deleteSourceReducer from \"./reducers/delete_source_reducer\";\n\n// setup axios\naxios.defaults.baseURL = `${process.env.REACT_APP_SERVER}/api`;\naxios.defaults.headers.common[\"Authorization\"] = process.env.REACT_APP_TOKEN;\n\nconst rootReducer = combineReducers({\n  posts: loadPosts,\n  sources: loadSources,\n  user: checkUser\n  // addSource: addSourceReducer,\n  // selectPost: selectPostReducer,\n  // updatePost: updatePostReducer,\n  // updateSource: updateSourceReducer,\n  // deleteSource: deleteSourceReducer,\n  // refreshPostsReducer: refreshPostsReducer,\n});\n\nexport type AppState = ReturnType<typeof rootReducer>;\n\nexport default function configureStore() {\n  const middlewares = [reduxPromise, logger];\n  const middleWareEnhancer = applyMiddleware(...middlewares);\n\n  // const initialState = {\n  //   posts: [],\n  //   sources: [],\n  //   addSource: \"\",\n  //   updatePost: \"\",\n  //   selectPost: \"\",\n  //   sourceCreateModule: true,\n  //   deleteSource: \"\",\n  //   refreshPostsReducer: \"\"\n  // };\n\n  const store = createStore(\n    rootReducer,\n    composeWithDevTools(middleWareEnhancer)\n  );\n\n  return store;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport WebFont from \"webfontloader\";\nimport { Provider } from \"react-redux\";\nimport { CookiesProvider } from \"react-cookie\";\n\n// load components\nimport App from \"./containers/App/App\";\nimport \"./index.scss\";\n// import \"./styles/_definitions.scss\";\nimport configureStore from \"./store\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// loading fonts\nWebFont.load({\n  google: {\n    families: [\n      \"Alegreya:400,400i,500,500i,700,700i:cyrillic,cyrillic-ext,latin-ext\",\n      \"Open+Sans:300,300i,400\",\n      \"Roboto+Mono:300\"\n    ]\n  }\n});\n\nconst store = configureStore();\n\nReactDOM.render(\n  <CookiesProvider>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </CookiesProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","// Describing the shape of the system's slice of state\nexport interface User {\n  name: string;\n  password: string;\n  email: string;\n}\nexport interface CurrentUser {\n  email: string;\n  token: string;\n}\n\nexport interface UserSystemState {\n  user: User;\n  currentUser: CurrentUser;\n}\n\nexport interface UserQuery {\n  action: [string, string];\n  id: string;\n  fields?: { [index: string]: string };\n}\n\n// export interface UserToken {\n//   id: string;\n// }\n// Describing the different ACTION NAMES available\nexport const CHECK_USER = \"CHECK_USER\";\nexport const API_REQUEST = \"API_REQUEST\";\n// export const UPDATE_POST = \"UPDATE_POST\";\n// export const SELECT_POST = \"SELECT_POST\";\n\ninterface CheckUserAction {\n  type: typeof CHECK_USER;\n  payload: UserSystemState;\n}\ninterface ApiRequestAction {\n  type: typeof API_REQUEST;\n  payload: UserSystemState;\n}\n// interface UpdatePostAction {\n//   type: typeof UPDATE_POST;\n//   payload: UserQuery;\n// }\n\n// interface SelectPostAction {\n//   type: typeof SELECT_POST;\n//   payload: PostId;\n// }\n\nexport type SystemActionTypes = CheckUserAction | ApiRequestAction;\n// | UpdatePostAction\n// | SelectPostAction;\n"],"sourceRoot":""}